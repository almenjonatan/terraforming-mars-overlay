{"version":3,"sources":["terrasummary/columns.js","terrasummary/terrasummary.js","App.js","serviceWorker.js","index.js"],"names":["COL_STYLE","fontSize","fontWeight","paddingLeft","paddingRight","require","Map","fromJS","customStyles","headCells","style","createTheme","background","text","primary","secondary","disabled","TerraSummary","props","state","playerStates","undefined","data","countAwards","compact","streamerMode","showCheckboxes","handleKeyDown","bind","handleCountAwards","handleCompact","handleStreamerMode","socket","io","on","console","log","setState","merge","document","addEventListener","this","event","keyCode","prevState","Boolean","target","checked","awards","columns","name","selector","width","conditionalCellStyles","when","row","Color","parseInt","split","sortable","omit","scores","entrySeq","map","value","s","get","color","set","getIn","reduce","acc","val","totalWithoutAwards","theme","toJS","dense","noHeader","subHeader","subHeaderAlign","subHeaderComponent","marginRight","type","onChange","React","App","className","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3b88a280.chunk.js","sourcesContent":["const CELL_PADDING = 3;\r\nconst SMALL_COL_WIDTH = \"32px\";\r\n\r\nconst COL_STYLE = {\r\n  fontSize: 20,\r\n  fontWeight: 600,\r\n  paddingLeft: CELL_PADDING,\r\n  paddingRight: CELL_PADDING\r\n};\r\n\r\nexport const getColumns = (awards, compact) => {\r\n    return [\r\n        {\r\n            name: \"Player\",\r\n            selector: \"Color\",\r\n            width: \"50px\",\r\n            style: {\r\n                paddingLeft: CELL_PADDING,\r\n                paddingRight: CELL_PADDING\r\n            },\r\n            conditionalCellStyles: [\r\n                {\r\n                    when: row => row.Color === 'Purple',\r\n                    style: {\r\n                        background: 'linear-gradient(rgb(146, 112, 166), rgb(188, 153, 238))',\r\n                        fontWeight: 600\r\n                    }\r\n                },\r\n                {\r\n                    when: row => row.Color === 'Green',\r\n                    style: {\r\n                        background: 'linear-gradient(rgb(76, 164, 70), rgb(153, 208, 142))',\r\n                        fontWeight: 600\r\n                    }\r\n                },\r\n                {\r\n                    when: row => row.Color === 'Yellow',\r\n                    style: {\r\n                        background: 'linear-gradient(rgb(254, 197, 0), rgb(176, 164, 118))',\r\n                        fontWeight: 600\r\n                    }\r\n                },\r\n                {\r\n                    when: row => row.Color === 'Red',\r\n                    style: {\r\n                        background: 'linear-gradient(rgb(253, 27, 75), rgb(247, 151, 151))',\r\n                        fontWeight: 600\r\n                    }\r\n                },\r\n                {\r\n                    when: row => row.Color === 'Blue',\r\n                    style: {\r\n                        background: 'linear-gradient(rgb(43, 157, 254), rgb(115, 147, 242))',\r\n                        fontWeight: 600\r\n                    }\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            name: \"Sum\",\r\n            selector: \"FinalScore\",\r\n            // convert px to int, add a buffer, then back to px string\r\n            width: `${parseInt(SMALL_COL_WIDTH.split(\"px\")[0], 10) + 10}px`,\r\n            style: COL_STYLE,\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: \"Cty\",\r\n            selector: \"CityScore\",\r\n            width: SMALL_COL_WIDTH,\r\n            style: COL_STYLE,\r\n            omit: compact\r\n        },\r\n        {\r\n            name: \"Grn\",\r\n            selector: \"GreeneryScore\",\r\n            width: SMALL_COL_WIDTH,\r\n            style: COL_STYLE,\r\n            omit: compact\r\n        },\r\n        {\r\n            name: \"VP\",\r\n            selector: \"VictoryPoints\",\r\n            width: SMALL_COL_WIDTH,\r\n            style: COL_STYLE,\r\n            omit: compact\r\n        },\r\n        {\r\n            name: \"MS\",\r\n            selector: \"MileStones\",\r\n            width: SMALL_COL_WIDTH,\r\n            style: COL_STYLE,\r\n            omit: compact\r\n        },\r\n        {\r\n            name: \"Aw\",\r\n            selector: \"Awards\",\r\n            width: SMALL_COL_WIDTH,\r\n            style: COL_STYLE,\r\n            omit: awards || compact\r\n        }\r\n    ];\r\n}\r\n","import io from \"socket.io-client\";\r\nimport * as React from \"react\";\r\nimport DataTable, {createTheme} from 'react-data-table-component';\r\nimport {getColumns} from \"./columns\";\r\n\r\nconst { Map, fromJS } = require('immutable');\r\n\r\nconst CELL_PADDING = 3;\r\n\r\nconst customStyles = {\r\n  headCells: {\r\n    style: {\r\n      paddingLeft: CELL_PADDING,\r\n      paddingRight: CELL_PADDING,\r\n    }\r\n  }\r\n}\r\n\r\ncreateTheme('default', {\r\n    background: \"rgba(255, 255, 255, 0)\",\r\n    text: {\r\n      primary: '#FFFFFF',\r\n      secondary: 'rgba(255, 255, 255, 0.7)',\r\n      disabled: 'rgba(0,0,0,.12)',\r\n    },\r\n});\r\n\r\nconst createScoreData = (playerStates, countAwards) => {\r\n    return playerStates.entrySeq().map(([key, value])=> {\r\n        let s = value.get(\"Score\")\r\n\r\n        // just asmodee things\r\n        let color = value.get(\"Color\");\r\n        if (color === 'Grey') {\r\n          color = 'Purple';\r\n        }\r\n\r\n        s = s.set(\"Color\", color);\r\n\r\n        s = s.set(\"MileStones\", value\r\n            .getIn([\"Score\", \"MilestoneScore\"])\r\n            .map(value => value.get(\"Score\"))\r\n            .reduce((acc, val) => acc + val) || 0);\r\n\r\n        s = s.set(\"Awards\", value\r\n            .getIn([\"Score\", \"AwardScore\"])\r\n            .map(value => value.get(\"Score\"))\r\n            .reduce((acc, val) => acc + val) || 0);\r\n\r\n\r\n        // subtract awards score from total if checked\r\n        if (countAwards) {\r\n          const finalScore = s.get(\"FinalScore\");\r\n          const awardScore = value.getIn(['Score', 'AwardScore'])\r\n            .map(value => value.get(\"Score\"))\r\n            .reduce((acc, val) => acc + val);\r\n          const totalWithoutAwards = finalScore - awardScore;\r\n          s = s.set(\"FinalScore\", totalWithoutAwards);\r\n        }\r\n\r\n        return s;\r\n    });\r\n}\r\n\r\nclass TerraSummary extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        playerStates: props.data === undefined ? Map() : fromJS(props.data),\r\n        countAwards: false,\r\n        compact: false,\r\n        streamerMode: false,\r\n        showCheckboxes: true,\r\n      };\r\n\r\n      this.handleKeyDown = this.handleKeyDown.bind(this);\r\n      this.handleCountAwards = this.handleCountAwards.bind(this);\r\n      this.handleCompact = this.handleCompact.bind(this);\r\n      this.handleStreamerMode = this.handleStreamerMode.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = io(\"localhost:5000\");\r\n\r\n        socket.on(\"connect\", () => {\r\n            console.log(\"connected!\")\r\n        })\r\n\r\n        socket.on(\"update\", (data) => {\r\n            this.setState({ playerStates: this.state.playerStates.merge(fromJS(data))})\r\n        })\r\n\r\n        document.addEventListener(\"keydown\", this.handleKeyDown);\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n      if (event.keyCode === 72) { // 72 === h key, https://keycode.info/\r\n        this.setState((prevState) => ({ showCheckboxes: !prevState.showCheckboxes }));\r\n      }\r\n    };\r\n\r\n    handleCountAwards(event) {\r\n      this.setState({ countAwards: Boolean(event.target.checked) });\r\n    }\r\n\r\n    handleCompact(event) {\r\n      this.setState({ compact: Boolean(event.target.checked )});\r\n    }\r\n\r\n    handleStreamerMode(event) {\r\n      this.setState({ streamerMode: Boolean(event.target.checked )});\r\n    }\r\n\r\n    render() {\r\n        const columns = getColumns(!this.state.countAwards, this.state.compact);\r\n        const scores = createScoreData(this.state.playerStates, !this.state.countAwards);\r\n        const theme = this.state.streamerMode ? 'default' : 'dark';\r\n\r\n        return(\r\n          <DataTable\r\n            columns={columns}\r\n            data={scores.toJS()}\r\n            theme={theme}\r\n            dense\r\n            noHeader\r\n            subHeader={this.state.showCheckboxes}\r\n            subHeaderAlign=\"left\"\r\n            subHeaderComponent={\r\n              <div>\r\n                <label style={{ color: 'white'}}>Press 'h' to hide checkboxes</label>\r\n                <br/>\r\n                <label style={{ color: 'white' }}>Awards?</label>\r\n                <input style={{ marginRight: 10, color: 'white'}}\r\n                  type=\"checkbox\" checked={Boolean(this.state.countAwards)} onChange={this.handleCountAwards}/>\r\n                <br/>\r\n                <label style={{ color: 'white', marginRight: 10 }}>Compact?</label>\r\n                <input type=\"checkbox\" checked={Boolean(this.state.compact)} onChange={this.handleCompact}/>\r\n                <br/>\r\n                <label style={{ color: 'white', marginRight: 10 }}>Streamer Mode?</label>\r\n                <input type=\"checkbox\" checked={Boolean(this.state.streamerMode)} onChange={this.handleStreamerMode}/>\r\n              </div>\r\n            }\r\n            customStyles={customStyles}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TerraSummary;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TerraSummary from \"./terrasummary/terrasummary\";\r\nimport {mockData} from \"./mockdata\";\r\n\r\n// Use <TerraSummary data={mockData} /> to use mock data\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n          <TerraSummary />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}