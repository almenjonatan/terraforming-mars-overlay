/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.2.0 (NJsonSchema v10.3.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateTurn(playerId: string | null, body: TurnLog | undefined): Promise<void> {
        let url_ = this.baseUrl + "/GameState/turn/{playerId}";
        if (playerId === undefined || playerId === null)
            throw new Error("The parameter 'playerId' must be defined.");
        url_ = url_.replace("{playerId}", encodeURIComponent("" + playerId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTurn(_response);
        });
    }

    protected processUpdateTurn(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updatePlayerMetadata(playerId: string | null, body: { [key: string]: PlayerMetaData; } | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/GameState/metadata/{playerId}";
        if (playerId === undefined || playerId === null)
            throw new Error("The parameter 'playerId' must be defined.");
        url_ = url_.replace("{playerId}", encodeURIComponent("" + playerId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdatePlayerMetadata(_response);
        });
    }

    protected processUpdatePlayerMetadata(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class OccupiedTile implements IOccupiedTile {
    id!: number;
    type!: string;
    owner!: string;
    ownerColor!: string;

    constructor(data?: IOccupiedTile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.owner = _data["owner"];
            this.ownerColor = _data["ownerColor"];
        }
    }

    static fromJS(data: any): OccupiedTile {
        data = typeof data === 'object' ? data : {};
        let result = new OccupiedTile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["owner"] = this.owner;
        data["ownerColor"] = this.ownerColor;
        return data; 
    }
}

export interface IOccupiedTile {
    id: number;
    type: string;
    owner: string;
    ownerColor: string;
}

export class Score implements IScore {
    awardScore!: { [key: string]: number; };
    cityScore!: number;
    finalScore!: number;
    greeneryScore!: number;
    milestoneScore!: { [key: string]: number; };
    terraFormingRating!: number;
    victoryPoints!: number;

    constructor(data?: IScore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.awardScore = {};
            this.milestoneScore = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["awardScore"]) {
                this.awardScore = {} as any;
                for (let key in _data["awardScore"]) {
                    if (_data["awardScore"].hasOwnProperty(key))
                        this.awardScore![key] = _data["awardScore"][key];
                }
            }
            this.cityScore = _data["cityScore"];
            this.finalScore = _data["finalScore"];
            this.greeneryScore = _data["greeneryScore"];
            if (_data["milestoneScore"]) {
                this.milestoneScore = {} as any;
                for (let key in _data["milestoneScore"]) {
                    if (_data["milestoneScore"].hasOwnProperty(key))
                        this.milestoneScore![key] = _data["milestoneScore"][key];
                }
            }
            this.terraFormingRating = _data["terraFormingRating"];
            this.victoryPoints = _data["victoryPoints"];
        }
    }

    static fromJS(data: any): Score {
        data = typeof data === 'object' ? data : {};
        let result = new Score();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.awardScore) {
            data["awardScore"] = {};
            for (let key in this.awardScore) {
                if (this.awardScore.hasOwnProperty(key))
                    data["awardScore"][key] = this.awardScore[key];
            }
        }
        data["cityScore"] = this.cityScore;
        data["finalScore"] = this.finalScore;
        data["greeneryScore"] = this.greeneryScore;
        if (this.milestoneScore) {
            data["milestoneScore"] = {};
            for (let key in this.milestoneScore) {
                if (this.milestoneScore.hasOwnProperty(key))
                    data["milestoneScore"][key] = this.milestoneScore[key];
            }
        }
        data["terraFormingRating"] = this.terraFormingRating;
        data["victoryPoints"] = this.victoryPoints;
        return data; 
    }
}

export interface IScore {
    awardScore: { [key: string]: number; };
    cityScore: number;
    finalScore: number;
    greeneryScore: number;
    milestoneScore: { [key: string]: number; };
    terraFormingRating: number;
    victoryPoints: number;
}

export class ResourceItem implements IResourceItem {
    production!: number;
    quantity!: number;

    constructor(data?: IResourceItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.production = _data["production"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): ResourceItem {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["production"] = this.production;
        data["quantity"] = this.quantity;
        return data; 
    }
}

export interface IResourceItem {
    production: number;
    quantity: number;
}

export class PlayerLog implements IPlayerLog {
    score!: Score;
    tags!: { [key: string]: number; };
    resourceData!: { [key: string]: ResourceItem; };
    cardsInHand!: number[];

    constructor(data?: IPlayerLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.score = new Score();
            this.tags = {};
            this.resourceData = {};
            this.cardsInHand = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.score = _data["score"] ? Score.fromJS(_data["score"]) : new Score();
            if (_data["tags"]) {
                this.tags = {} as any;
                for (let key in _data["tags"]) {
                    if (_data["tags"].hasOwnProperty(key))
                        this.tags![key] = _data["tags"][key];
                }
            }
            if (_data["resourceData"]) {
                this.resourceData = {} as any;
                for (let key in _data["resourceData"]) {
                    if (_data["resourceData"].hasOwnProperty(key))
                        this.resourceData![key] = _data["resourceData"][key] ? ResourceItem.fromJS(_data["resourceData"][key]) : new ResourceItem();
                }
            }
            if (Array.isArray(_data["cardsInHand"])) {
                this.cardsInHand = [] as any;
                for (let item of _data["cardsInHand"])
                    this.cardsInHand!.push(item);
            }
        }
    }

    static fromJS(data: any): PlayerLog {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["score"] = this.score ? this.score.toJSON() : <any>undefined;
        if (this.tags) {
            data["tags"] = {};
            for (let key in this.tags) {
                if (this.tags.hasOwnProperty(key))
                    data["tags"][key] = this.tags[key];
            }
        }
        if (this.resourceData) {
            data["resourceData"] = {};
            for (let key in this.resourceData) {
                if (this.resourceData.hasOwnProperty(key))
                    data["resourceData"][key] = this.resourceData[key] ? this.resourceData[key].toJSON() : <any>undefined;
            }
        }
        if (Array.isArray(this.cardsInHand)) {
            data["cardsInHand"] = [];
            for (let item of this.cardsInHand)
                data["cardsInHand"].push(item);
        }
        return data; 
    }
}

export interface IPlayerLog {
    score: Score;
    tags: { [key: string]: number; };
    resourceData: { [key: string]: ResourceItem; };
    cardsInHand: number[];
}

export class TurnLog implements ITurnLog {
    generation!: number;
    oceanTileCounter!: number;
    occupiedTiles!: OccupiedTile[];
    oxygenLevel!: number;
    playerInfo!: { [key: string]: PlayerLog; };
    temperatureLevel!: number;

    constructor(data?: ITurnLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.occupiedTiles = [];
            this.playerInfo = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            this.generation = _data["generation"];
            this.oceanTileCounter = _data["oceanTileCounter"];
            if (Array.isArray(_data["occupiedTiles"])) {
                this.occupiedTiles = [] as any;
                for (let item of _data["occupiedTiles"])
                    this.occupiedTiles!.push(OccupiedTile.fromJS(item));
            }
            this.oxygenLevel = _data["oxygenLevel"];
            if (_data["playerInfo"]) {
                this.playerInfo = {} as any;
                for (let key in _data["playerInfo"]) {
                    if (_data["playerInfo"].hasOwnProperty(key))
                        this.playerInfo![key] = _data["playerInfo"][key] ? PlayerLog.fromJS(_data["playerInfo"][key]) : new PlayerLog();
                }
            }
            this.temperatureLevel = _data["temperatureLevel"];
        }
    }

    static fromJS(data: any): TurnLog {
        data = typeof data === 'object' ? data : {};
        let result = new TurnLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["generation"] = this.generation;
        data["oceanTileCounter"] = this.oceanTileCounter;
        if (Array.isArray(this.occupiedTiles)) {
            data["occupiedTiles"] = [];
            for (let item of this.occupiedTiles)
                data["occupiedTiles"].push(item.toJSON());
        }
        data["oxygenLevel"] = this.oxygenLevel;
        if (this.playerInfo) {
            data["playerInfo"] = {};
            for (let key in this.playerInfo) {
                if (this.playerInfo.hasOwnProperty(key))
                    data["playerInfo"][key] = this.playerInfo[key] ? this.playerInfo[key].toJSON() : <any>undefined;
            }
        }
        data["temperatureLevel"] = this.temperatureLevel;
        return data; 
    }
}

export interface ITurnLog {
    generation: number;
    oceanTileCounter: number;
    occupiedTiles: OccupiedTile[];
    oxygenLevel: number;
    playerInfo: { [key: string]: PlayerLog; };
    temperatureLevel: number;
}

export class PlayerMetaData implements IPlayerMetaData {
    availableCorps!: string[];
    color!: string;
    corporation!: string;
    isLocalPlayer!: boolean;
    localPlayerId!: string;
    name!: string;
    elo!: number;
    karma!: number;
    webId!: string;
    avatarURI!: string;

    constructor(data?: IPlayerMetaData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.availableCorps = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["availableCorps"])) {
                this.availableCorps = [] as any;
                for (let item of _data["availableCorps"])
                    this.availableCorps!.push(item);
            }
            this.color = _data["color"];
            this.corporation = _data["corporation"];
            this.isLocalPlayer = _data["isLocalPlayer"];
            this.localPlayerId = _data["localPlayerId"];
            this.name = _data["name"];
            this.elo = _data["elo"];
            this.karma = _data["karma"];
            this.webId = _data["webId"];
            this.avatarURI = _data["avatarURI"];
        }
    }

    static fromJS(data: any): PlayerMetaData {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerMetaData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.availableCorps)) {
            data["availableCorps"] = [];
            for (let item of this.availableCorps)
                data["availableCorps"].push(item);
        }
        data["color"] = this.color;
        data["corporation"] = this.corporation;
        data["isLocalPlayer"] = this.isLocalPlayer;
        data["localPlayerId"] = this.localPlayerId;
        data["name"] = this.name;
        data["elo"] = this.elo;
        data["karma"] = this.karma;
        data["webId"] = this.webId;
        data["avatarURI"] = this.avatarURI;
        return data; 
    }
}

export interface IPlayerMetaData {
    availableCorps: string[];
    color: string;
    corporation: string;
    isLocalPlayer: boolean;
    localPlayerId: string;
    name: string;
    elo: number;
    karma: number;
    webId: string;
    avatarURI: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}